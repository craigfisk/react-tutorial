/* scripts/tutorial15.js */

var Photo = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="photo">
        <h4 className="photoImage">
          {this.props.photo}
        </h4>
        <div>{this.props.caption}</div>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var PhotoBox = React.createClass({
  loadPhotosFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handlePhotoSubmit: function(photo) {
    var photos = this.state.data;
    // optimistically sets an id on new photo, which will be replaced by id
    // generated by the server. In production, would not use Date.now() for this.
    photo.photo_id = Date.now();
    var newPhotos = photos.concat([photo]);
    this.setState({data: newPhotos});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: photo,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: photos});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadPhotosFromServer();
    setInterval(this.loadPhotosFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="photoBox">
        <h1>Photos</h1>
        <PhotoList data={this.state.data} />
        <PhotoForm onPhotoSubmit={this.handlePhotoSubmit} />
      </div>
    );
  }
});

var PhotoList = React.createClass({
  render: function() {
    var photoNodes = this.props.data.map(function(photo) {
      return (
        <Photo photo={photo.photo} dt_added={photo.dt_added} key={photo.photo_id}>
          {photo.caption}
        </Photo>
      );
    });
    return (
      <div className="photoList">
        {photoNodes}
      </div>
    );
  }
});

var PhotoForm = React.createClass({
  getInitialState: function() {
    return {photo: 'test.jpg', uploader_id: 3};
  },
  handlePhotoChange: function(e) {
    this.setState({photo: e.target.value});
  },
  handleCaptionChange: function() {
    this.setState({caption: e.target.value});
  },
  handleUploaderIdChange: function() {
    this.setState({uploader_id: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var photo = this.state.photo.trim();
    var caption = this.state.caption.trim();
    var uploader_id = this.state.uploader_id;
    if (!photo || !uploader_id) {
      return;
    }
    this.props.onPhotoSubmit({photo: photo, uploader_id: uploader_id});
    this.setState({photo: 'test', uploader_id: 3});
  },
  render: function() {
    return (
      <form className="photoForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="photo"
          value={this.state.photo}
          onChange={this.handlePhotoChange}
        />
        <input
          type="text"
          placeholder="caption"
          value={this.state.caption}
          onChange={this.handleCaptionChange}
        />
        <input
          type="text"
          placeholder="uploader_id"
          value={this.state.uploader_id}
          onChange={this.handleUploaderIdChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});


ReactDOM.render(
  <PhotoBox url="/api/photos" pollInterval={2000} />,
  document.getElementById('content')
);
